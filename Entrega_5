import scipy as sp
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def ynormal(tol,B,q,ss,n,S0,C0):
    yn = 20
    q = q
    
    while tol>(10**(-5)):
        A = B*yn + ss*(yn**2)
        P = B + 2*yn*sp.sqrt((ss**2)+1)
        dAdyn = B + 2*ss*yn
        dPdyn = 2*sp.sqrt((ss**2)+1)
        Q = (C0*(A**(5./3.)*(P**(-2./3.))*sp.sqrt(S0))/n)
        
        fyn = (A**(5./3.))*(P**(-2./3.))-(n*q)/(C0*sp.sqrt(S0))
        dfdyn = (5./3.)*(A**(2./3.))*(P**(-2./3.))*dAdyn - (2./3.)*(A**(5./3.))*(P**(-5./3.))*dPdyn
        yn2 = yn - (fyn/dfdyn)
        
        tol = abs(yn2-yn)
        
        yn = yn2
        
    return yn

def NRalfa(Q,B,ss,C0,S0,n):
    yini = 1
    y2 = yini
    
    if C0 == 1:
        g = 9.81
    else:
        g = 32.2
    
    tol = 10
    ite = 0
    while tol > 0.001:
        ite+=1
        A = B*y2 + ss*(y2**2)
        dady = B + 2*ss*y2
        l = y2 * sp.sqrt((ss**2)+1)
        P = B + 2*l
        dpdy = 2*sp.sqrt((ss**2)+1)
        beta = 3./5.
        alpha = (n*P**(2./3.)/(C0*sp.sqrt(S0)))**beta
        fy = A - alpha*(Q**beta)
        dfdy = dady - (2./5.)*(n*Q/(C0*sp.sqrt(S0)))**beta*dpdy*P**(-beta)
        # # print "dady: {}".format(dady)
        # print Q
        # q=raw_input()
        yf = y2 - fy/dfdy
        
        tol = abs(yf-y2)
        # print tol
        
        y2 = yf
        lista = [yf,A]
    return lista

N = 1000
L = 150000
B = 100
S = 0.001
n = 0.045
ss = 0
C0 = 1.485
NC = 1.
Tfin = 600*60
g = 32.2

dx = L/(N-1)
x = sp.zeros(N)
for i in range(len(x)-1):
    x[i] = (i-1)*dx

Q = sp.zeros((N,N))
Q[0,:] = 250.

y = sp.zeros((N,N))
print Q[0,1]
y[0,:] = ynormal(1,B,Q[0,1],ss,n,S,C0)
print y[0,0]

A = sp.zeros((N,N))
A[0,:] = B*y[0,0]

V = sp.zeros((N,N))
V[0,:] = Q[0,0]/A[0,0]
t = 0
k = 0
pi = sp.pi
# plt.show()
print 'holi'
# plt.axis((0,L,0,8))

xdata,ydata=[],[]
axes=plt.gca()
axes.set_xlim(0,L)
axes.set_ylim(0,8)

line, =axes.plot(xdata,ydata)

while t < Tfin:
    print "Ejecucion: {}%".format(t/Tfin*100)
    print NC*dx/(sp.mean(V[k,:]))
    dt = NC*dx/(sp.mean(V[k,:]))
    print "dt: {}".format(dt)
    k+=1
    t+=dt
    tshow = t/60
    
    if t <= 150*60:
        Q[k,0] = 250. + 750./pi*(1-sp.cos(pi*t/(60*75)))
    else:
        Q[k,0] = 250.
    
    ay = NRalfa(Q[k,0],B,ss,C0,S,n)
    A[k,0] = ay[1]
    y[k,0] = ay[0]
    V[k,0] = Q[k,0]/A[k,0]

    
    for i in range(0,N-1):
        Q[k,i+1] = Q[k,i] - dt/dx*(A[k,i]-A[k-1,i])

        ay = NRalfa(Q[k,i],B,ss,C0,S,n)
        A[k,i+1] = ay[1]
        y[k,i+1] = ay[0]
        V[k,i+1] = Q[k,i+1]/A[k,i+1]
    # plt.subplot(211)
    line.set_xdata(x)
    line.set_ydata(y[k,:])
    linea=plt.draw()
    linea="tiempo: {}".format(t/60)    
    plt.title(linea)
    # plt.subplot(212)
    # line.set_xdata(x)
    # line.set_ydata(Q[k,:])
    linea=plt.draw()
    plt.pause(1e-10)
    if k==1:
        # plt.cla()
        # linea.remove()
        pass

    # plt.axis((0,L,0,8))
    # plt.plot(x,y[k,:])
    # plt.show()

plt.show()
print "adios"
