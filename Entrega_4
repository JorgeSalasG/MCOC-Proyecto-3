import scipy as sp

def yn(B,ss,yini,tol,C0,S0,n):
    yn = yini
    q=30 #m**3/s
    # print "Parto en: {}".format(yn)

    while tol>(10**(-6)):
        #Calculamos Variables
        A = B*yn + ss*(yn**2)
        P = B + 2*yn*sp.sqrt(ss**2+1)
        dAdyn = B + 2*ss*yn
        dPdyn = 2*sp.sqrt(ss**2+1)
        Q = (C0*(A**(5./3.)*(P**(-2./3.))*sp.sqrt(S0))/n)

        #Preparara Newton-Raphson
        fyn = (A**(5./3.))*(P**(-2./3.))-(n*q)/(C0*sp.sqrt(S0))
        dfyn = (5./3.)*(A**(2./3.))*(P**(-2./3.))*dAdyn - (2./3.)*(A**(5./3.))*(P**(-5./3.))*dPdyn
        yn2 = yn - (fyn/dfyn)


        #Calculo tolerancia
        tol = abs(yn2-yn)

        #Se actualiza yn
        yn = yn2
        # print "voy en: {}".format(yn)
    return yn

def geom(y,B,ss):
	A = B*y + ss*(y**2) #canal trapezoidal si rectangular ss = 0
	# print y,'hola'
	dady  = B +2*y*ss
	l = y * sp.sqrt((ss**2)+1)
	P = B +2*l
	dpdy = 2* sp.sqrt((ss**2)+1)
	R = A/P
	dRdy = P**(-1)*dpdy - P**(-2)*A*dpdy
	return A,dady,P,dpdy,R,dRdy

def NR_Fgv(yini,B,Q,n,S0,ss,C0,dx,y1,z1):
	y2 = yini

	if C0 == 1:
		g = 9.81
	else :
		g = 32.2

	tol = 10
	ite = 0

	while tol > 10 ** -5 and ite < 100:
		ite += 1
		A1,dA1dy1,P1,dP1dy1,R1,dR1dy1 = geom(y1,B,ss)
		# print geom(y1,B,ss)
		# print "Hola soy y1: {}".format(y1)
		H1 = z1 + y1 + ((Q ** 2)/(2 * g * (A1 ** 2)))
		sf1 = ((Q * n) ** 2)/((C0 * A1 * (R1 ** (2/3))) ** 2)
		A2,dA2dy2,P2,dP2dy2,R2,dR2dy2 = geom(y2,B,ss)
		z2 = z1 - (S0 * dx)
		H2 = z2 + y2 + ((Q ** 2)/(2 * g * (A2 ** 2)))
		sf2 = ((Q * n) ** 2)/((C0 * A2 * (R2 ** (2/3))) ** 2)
		T2 = B + 2*ss*y2
#Revisar esta parte, porque copie lo de Newton Raphson de la entrega anterior y no se si esta bien hecho.
		fy2 = H2-H1+0.5*dx*(sf1+sf2)
		# dfy2dy2 = 1 - ((Q**2)*dA2dy2)/(g*A2**3) + 0.5*dx*((-2*sf2*dA2sy2/A2)- (4.0/3.0)*(sf2/R2)*(T2/P2-A2*2*sp.sqrt(ss**2+1)/(P2**2)))
		dfy2dy2=1-((Q**2)*dA2dy2)/(g*A2**3)-dx*(sf2/A2*dA2dy2+2.0/3.0*sf2/R2*dR2dy2)
		yf = y2 - fy2/dfy2dy2

		tol = abs(yf-y2)
		y2 = yf


	return y2,z2

def fgv(Q,B,S,ss,C0,x1,y1,z1,dx,n):
	diff=0.001
	dist=0
	x = sp.zeros(300)
	y = sp.zeros(300)
	z = sp.zeros(300)
	yini = 5.0 #mts
	x[1] = x1
	y[1] = y1
	z[1] = z1
	dx = 0.04 #dada
	if C0 == 1:
		g = 9.81
	else:
		g = 32.2

	i=0
	tol = 1000
	ynor = yn(B,ss,yini,tol,C0,S,n)
	while y[i+1]<ynor-diff or y[i+1]>ynor+diff:
		print y[i+1],ynor
		i+=1
		dist = dist+dx
		x[i+1]=x[i]+dx
		y[i+1],z[i+1]=NR_Fgv(yini,B,Q,n,S,ss,C0,dx,y[i],z[i])

	elsa = y[i+1]+z[i+1]
	return [x[i+1],y[i+1],z[i+1],elsa,dist]

#Datos Canal
B = 10. #mts
ss = 2. #H/V 0 si es un canal rectangula
yini = 5. #mts
tol = 1.
C0 = 1 #unidades SI, 1,49 en caso de unidades britanicas
S0 = 0.001 #Depende del slope 
n = 0.013 # Depende del material


# yn=yn(B,ss,yini,tol,C0,S0,n)
# print "la altura normal es: {}".format(yn)

fgv(5,B,S0,ss,C0,0,2,0,0.04,n)
